#ifndef _TIMER1_H_
#define _TIMER1_H_

#include "Port.h"
#include "LED.h"
/* Public Timer1 Macros */

/* --------INTCON_reg-----------------*/

#define TIMER1_INTERRUPT_ENABLE()  ((TMR1IE) = 1)

#define TIMER1_INTERRUPT_DISABLE() ((TMR1IE) = 0)

#define TIMER1_INTERRUPT_FLAG_CLEAR() ((TMR1IF) = 0)

#define TIMER1_INTERRUPT_GET_FLAG()     (TMR1IF)

/* -------- Option_reg_Functions----------*/
//note:
//TMR1 IN TIMER MODE
//In order to select this mode, it is necessary to clear the TMR1CS bit. After this, the 16-bit register will be incremented on every pulse generated by the internal oscillator. If the 4MHz quartz crystal is in use, it will be incremented every microsecond.
//In this mode, the T1SYNC bit does not affect the timer because it counts internal clock pulses. Since the whole electronics uses these pulses, there is no need for synchronization.
//The microcontroller ’s clock oscillator does not operate during sleep mode so the timer register overflow cannot cause any interrupt.

//T1CKPS1:T1CKPS0: Timer1 Input Clock Prescale Select bits
//11 = 1:8 prescale value
//10 = 1:4 prescale value
//01 = 1:2 prescale value
//00 = 1:1 prescale value
#define TIMER1_SET_PRESCALER(VALUE)         (T1CKPS1 = ((VALUE & 0x2) >> 1));\
                                            (T1CKPS0 = (VALUE & 0x1))


//T1OSCEN - LP Oscillator Enable Control bit
// 1 - LP oscillator is enabled for timer TMR1 clock (oscillator with low power consumption and frequency 32.768 kHz).
// 0 - LP oscillator is off.
#define TIMER1_LP_OSCILLATOR_ENABLE()       ( T1OSCEN = (HIGH_LEVEL) )
#define TIMER1_LP_OSCILLATOR_DISABLE()      ( T1OSCEN = (LOW_LEVEL) )


//T1SYNC - Timer1 External Clock Input Synchronization Control bit enables synchronization of the LP oscillator input or T1CKI pin input with the microcontroller internal clock. This bit is ignored while counting pulses from the main oscillator (bit TMR1CS = 0).
// 1 - Do not synchronize external clock input.
// 0 - Synchronize external clock input.
#define TIMER1_EXTERNAL_CLOCK_INPUT_SYNC_ENABLE()       ( T1SYNC = (LOW_LEVEL) )
#define TIMER1_EXTERNAL_CLOCK_INPUT_SYNC_DISABLE()      ( T1SYNC = (HIGH_LEVEL) )


//TMR1CS: Timer1 Clock Source Select bit
//1 = External clock from pin RC0/T1OSO/T1CKI (on the rising edge)
//0 = Internal clock (FOSC/4)
#define TIMER1_CLOCK_SOURCE_INTERNAL()     (TMR1CS = (LOW_LEVEL))
#define TIMER1_CLOCK_SOURCE_EXTERNAL()     (TMR1CS = (HIGH_LEVEL))

 //TMR1ON - Timer1 On bit
// 1 - Enable timer TMR1.
// 0 - Stop timer TMR1.
#define TIMER1_ENABLE()                    ( TMR1ON = (HIGH_LEVEL) )
#define TIMER1_DISABLE()                   ( TMR1ON = (LOW_LEVEL) )


/* -------- Option_reg_Commands/Values ----------*/

typedef enum {
    Timer1_Prescaler_1 = 0,
    Timer1_Prescaler_2    ,
    Timer1_Prescaler_4    ,
    Timer1_Prescaler_8

}tTMR1_Prescaler_Value;

void Timer1_Init(void);//tTMR1_Prescaler_Value prescale_value
void Timer1_Set_Start_value(U16 value);
void Timer1_Start(void);
void Timer1_Stop(void);
///////////////////////////////////////////////////////
//U16 Timer1_Read_TMR1_Register(void);
void Timer1_Start_Timeout(const U16 ticks_till_ovf);
//U8 Timer1_Check_Timeout(void);
void Timer1_Stop_Timeout(void);
//void Timer1_Set_Sandwich_MS(U8 SANDWICH_DELAY);
//void Timer1_Wait_For_Sandwich(void);
///////////////////////////////////////////////////////
U8 Timer1_Calculate_Execution_Time_TMR1H(U8 caclulated_exec_time);
U8 Timer1_Calculate_Execution_Time_TMR1L(U8 caclulated_exec_time);

#endif // _TIMER1_H_
